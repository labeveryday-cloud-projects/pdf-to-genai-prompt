import io
import json
from typing import Union, List

import boto3
import requests
from requests.exceptions import RequestException
from pdfminer.high_level import extract_text


bedrock = boto3.client("bedrock-runtime")


def download_pdf(urls: Union[str, List[str]]) -> None:
    """
    Downloads one or more PDF files from the provided URLs and saves the extracted text to a file.
    
    Args:
        urls (Union[str, List[str]]):       A single PDF URL or a list of PDF URLs.

    Returns:
        results (list):                       List of pdf files converted to text
    """
    results = []
    if isinstance(urls, str):
        # Convert a single URL to a list
        urls = [urls]

    for url in urls:
        try:
            response = requests.get(url)
            # Raise an exception for non-200 status codes
            response.raise_for_status()
        except RequestException as e:
            print(f"Error downloading the file ({url}): {e}")
            # Skip to the next URL
            continue

        if response.status_code == 200:
            # Create a file-like object from the PDF content
            pdf_file = io.BytesIO(response.content)
            try:            
                # Extract text from the PDF
                text = extract_text(pdf_file)
                # Return text file
                results.append(text)
            except ImportError:
                print("Error: The 'pdfminer' library is not installed. Please install it using 'pip install pdfminer.six'")
        else:
            print(f"Error downloading the file. Status code: {response.status_code}")
    return results


def send_prompt(prompt: str, modelId: str="anthropic.claude-3-sonnet-20240229-v1:0"):
    """
    Send a prompt to the Anthropic API and receive the generated response.
    
    Args:
        prompt (str): The prompt to send to the Anthropic API.
        modelId (str, optional): The ID of the Anthropic model to use. Defaults to "anthropic.claude-3-sonnet-20240229-v1:0".

    Returns:
        results (str): The response generated by the Anthropic API.
    """
    prompt_config = {
        "anthropic_version": "bedrock-2023-05-31",
        "max_tokens": 4096,
        "messages": [
            {
                "role": "user",
                "content": [
                    {
                    "type": "text",
                    "text": prompt
                    }
                ]
            }
        ]
    }

    body = json.dumps(prompt_config)

    modelId = modelId
    contentType = "application/json"
    accept = "application/json"
    response = bedrock.invoke_model(
        body=body,
        modelId=modelId,
        accept=accept, 
        contentType=contentType
    )
    response_body = json.loads(response.get("body").read())

    results = response_body.get("content")[0]["text"]
    return results


if __name__ == "__main__":
    # Example usage
    pdf_urls = [
        "https://d1.awsstatic.com/training-and-certification/docs-data-engineer-associate/AWS-Certified-Data-Engineer-Associate_Exam-Guide.pdf",
        "https://d1.awsstatic.com/training-and-certification/docs-sysops-associate/AWS-Certified-SysOps-Administrator-Associate_Exam-Guide.pdf",
        "https://d1.awsstatic.com/training-and-certification/docs-sa-assoc/AWS-Certified-Solutions-Architect-Associate_Exam-Guide.pdf",
        "https://d1.awsstatic.com/training-and-certification/docs-dev-associate/AWS-Certified-Developer-Associate_Exam-Guide.pdf"
    ]

    exams = download_pdf(pdf_urls)
    prompt = f"""Can you provide me with any areas that overlap between each other these 4 certifications? \
        
        List of certifications: \
        
        {str(exams)}"""
    response = send_prompt(prompt)
    print(response)
    